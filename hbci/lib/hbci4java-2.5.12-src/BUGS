
* Dialogabbruchnachrichten (seit HBCI 2.2) werden nicht erkannt, sondern als
  fehlerhafte Nachrichten (da nicht verschlüsselt/signiert) behandelt
  
* die Informationen über zu verwendende Kommunikations-Filter aus den BPD 
  werden *nicht* von HBCI4Java ausgewertet, da diese von vielen Banken 
  fehlerhaft belegt werden. Für "normale" HBCI-Verbindungen (TCP/IP über Port 
  3000) wird von HBCI4Java immer *kein* Filter verwendet, für HBCI-PIN/TAN ist
  das einstellbar
  
* Bei der Erzeugung von Jobs werden die UPD noch nicht ausgewertet, um die 
  Gültigkeit der erzeugten Jobs zu überprüfen.
  
* RSA-Chipkarten werden noch nicht unterstützt

* Die "Schlüsseldateien" für die Passport-Varianten Anonymous,DDV,PinTan und 
  RDH sind u.U. nicht zwischen verschiedenen Betriebssystemen bzw. 
  verschiedenen Java-Versionen portierbar. Für die Varianten Anonymous,DDV und
  PinTan ist das unkritisch, da diese Schlüsseldateien keine Informationen 
  enthalten, die nicht anderweitig reproduziert werden könnten (die Dateien 
  können also notfalls einfach gelöscht werden). Für die RDH-Variante trifft 
  das nicht zu, diese sollte deshalb auch nicht mehr verwendet werden, sondern
  statt dessen RDHNew (dieses Dateiformat ist systemunabhängig).

* Die SIZ-RDH-Bibliothek ist nicht thread-safe, es sollte also sichergestellt
  werden, dass zu jedem Zeitpunkt nur ein einziger Thread eine SIZ-RDH-
  Passport-Datei einliest.
  
* In der SIZ-Schlüsseldatei muss ein bereits vollständig 
  initialisierter Eintrag stehen (also mit Nutzerdaten, Nutzerschlüsseln, 
  Bankdaten und Bankschlüsseln) - nur die System-ID muss noch nicht 
  initialisiert (synchronisiert) sein. Beim Einlesen von Schlüsseldateien,
  in denen für einen Eintrag nicht alle Daten vorhanden sind, kann es zu
  Problemen kommen. Auch das initiale *Erzeugen* von SIZ-Schlüsseldateien
  wird noch nicht unterstützt.
  
* Beim Lesen von SIZ-Schlüsseldateien kann es zu Problemen kommen, wenn das
  Passwort für diese Dateien Umlaute enthält.
  
* Bei der Verwendung von SIZ-Schlüsseldateien sollten auf keinen Fall
  Schlüsseländerungen via HBCI4Java durchgeführt werden. HBCI4Java lässt 
  nämlich beim Schreiben solcher Dateien die Schlüsseldaten in der Datei
  unverändert -- geänderte Schlüssel würden also verloren gehen!

* es sind noch nicht alle Texte internationalisiert

* Die ZKA-Spezifikation fuer die HBCI-Versionen bis einschliesslich Version 2.2
  ist bzgl. terminierter Dauerauftragsaenderungen inkonsistent. HBCI4Java 
  implementiert einen "Workaround" um diese in sich widerspruechlichen Spez., 
  welcher wohl von den meisten HBCI-Servern so umgesetzt sein duerfte.

* Beim Zweischritt-PIN/TAN-Verfahren wird die Verwendung mehrerer TAN-Listen
  noch nicht unterstützt
  
* Beim Zweischritt-PIN/TAN-Verfahren werden noch keine Mehrfachsignaturen 
  unterstützt. Auch das zeitversetzte Senden des ersten und des zweiten 
  Schrittes dürften noch nicht funktionieren.
  
* Für das Zweischritt-PIN/TAN-Verfahren werden die optionalen Bankensignaturen
  für HITAN-Segmente noch nicht unterstützt
  
* Für FinTS-3.0 werden die Verfahren RDH-3 bis RDH-5 noch nicht unterstützt.
  Auch Zertifikate werden im Moment noch nicht unterstützt.

* Für FinTS-3.0 wird noch keine Nachrichten-Kompression unterstützt.
